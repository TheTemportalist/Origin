// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'scala'

sourceSets {
    foundation;
}

apply plugin: 'net.minecraftforge.gradle.forge'

repositories {

}

dependencies {

}

ext.getBuildNumber = {
    if (System.getenv("BUILD_NUMBER") != null) return "${System.getenv("BUILD_NUMBER")}"
    else if (project.hasProperty("bambooBuildNumber")) return project.bambooBuildNumber
    else return getDate()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('MM_dd_yyyy_HH_mm_ss')
    return formattedDate
}

group = "${org}.${groupName}"

// java version
sourceCompatibility = 1.7
targetCompatibility = 1.7
// end java version

minecraft {
    version = "${version_minecraft}-${version_forge}${version_forge_b}"
    runDir = "run"
    mappings = "${version_mcp}"

    replace "required-after:Forge", "required-after:Forge@[${version_forge},)"
    replace "@MOD_VERSION@", "${version_major}.${version_minor}.${version_patch}"
}

def createVersion() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    println("Building on branch " + branch)
    def version = "${version_major}.${version_minor}.${version_patch}"
    if (!branch.startsWith("master"))
        version += "." + getBuildNumber()
    println("Bulding with version " + version)
    return version
}

archivesBaseName = "${archiveName}-${project.minecraft.version}"
version = createVersion()

sourceSets {
    foundation.compileClasspath += api.compileClasspath
    foundation.compileClasspath += api.output;
    main.compileClasspath += foundation.compileClasspath;
    main.compileClasspath += foundation.output;
}

jar {
    from sourceSets.api.output;
    from sourceSets.foundation.output;
    from sourceSets.main.output;
}

task sourcesJar(type: Jar) {
    from sourceSets.api.scala;
    from sourceSets.foundation.scala;
    from sourceSets.main.scala;
    classifier = 'sources'
}

tasks.build.dependsOn sourcesJar

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

}

apply plugin: 'maven'
apply plugin: 'maven-publish'

uploadArchives {
    repositories {
        // official DDD maven stuffs
        if (project.hasProperty("dddUser") && project.hasProperty("dddPass")) {
            mavenDeployer {
                repository(url: "http://doubledoordev.net:8082/artifactory/mods") {
                    authentication(userName: dddUser, password: dddPass)
                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = "${archiveName}"
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description '${gitConfig.gitName}'
                        url 'https://github.com/TheTemportalist/${gitConfig.gitName}'

                        scm {
                            url 'https://github.com/TheTemportalist/${gitConfig.gitName}'
                            connection 'scm:git:git://github.com/TheTemportalist/${gitConfig.gitName}.git'
                            developerConnection 'scm:git:git@github.com:TheTemportalist/${gitConfig.gitName}.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/TheTemportalist/${gitConfig.gitName}/issues'
                        }

                        licenses {
                            license {
                                name '${gitConfig.license}'
                                url 'https://github.com/TheTemportalist/${gitConfig.gitName}/blob/master/LICENSE'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'TheTemportalist'
                                name 'TheTemportalist'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
